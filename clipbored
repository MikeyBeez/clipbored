#!/usr/bin/perl
use strict;
# clipbored - daemon that saves all X selections for use with dmenuclip
# Copyright (C) 2010 Magnus Woldrich <trapd00r@trapd00r.se>
#use Data::Dumper;

my $xsel_log = "$ENV{XDG_DATA_HOME}/clipbored/clips";
my $pidfile  = '/tmp/clipbored.pid';


if(!-f $xsel_log) {
  open(my $fh, '>', $xsel_log) or die($!);
  close($fh);
}

sync_cb();

sub sync_cb {
  daemonize();
  while(1) {
    chomp(my $current_selection = `/usr/bin/xsel -o`);
    print "$current_selection\n";
    if(defined($current_selection)) {
      open(my $r_xsel, '<', $xsel_log) or die("Cant open $xsel_log: $!");
      chomp(my @selections = <$r_xsel>);
      close($r_xsel);
      $current_selection =~ s/\n/ /g; # newline hassle

      if($current_selection ~~ @selections) {

      }
      else {
        open(my $a_xsel, '>>', $xsel_log) or die("Cant open $xsel_log: $!");
        print $a_xsel $current_selection, "\n";
        close($a_xsel);
      }
    }
    else {
    }
    sleep 2;
  }
}

sub daemonize {
  use POSIX 'setsid';
  my $PID = fork();
  exit(0) if($PID); #parent
  exit(1) if(!defined($PID)); # out of resources

  setsid();
  $PID = fork();
  exit(1) if(!defined($PID));

  if($PID) { # parent
    waitpid($PID, 0);
    unlink($pidfile); # remove the lock when child have died
    exit(0);
  }
  elsif($PID == 0) { # child
    open(my $fh, '>', $pidfile) or die("Cant open $pidfile: $!");
    print $fh $$;
    close($fh);
    open(STDOUT, '>', '/dev/null');
    open(STDERR, '>', '/dev/null');
    open(STDIN,  '<', '/dev/null');
  }
}
